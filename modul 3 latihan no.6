import 'dart:math';

// Fungsi untuk menghasilkan data acak
List<int> generateRandomData(int size) {
  Random random = Random();
  return List<int>.generate(size, (index) => random.nextInt(1000000));
}

// Insertion Sort
void insertionSort(List<int> arr) {
  for (int i = 1; i < arr.length; i++) {
    int key = arr[i];
    int j = i - 1;
    while (j >= 0 && arr[j] > key) {
      arr[j + 1] = arr[j];
      j--;
    }
    arr[j + 1] = key;
  }
}

// Selection Sort
void selectionSort(List<int> arr) {
  for (int i = 0; i < arr.length - 1; i++) {
    int minIndex = i;
    for (int j = i + 1; j < arr.length; j++) {
      if (arr[j] < arr[minIndex]) {
        minIndex = j;
      }
    }
    int temp = arr[i];
    arr[i] = arr[minIndex];
    arr[minIndex] = temp;
  }
}

// Bubble Sort
void bubbleSort(List<int> arr) {
  for (int i = 0; i < arr.length - 1; i++) {
    for (int j = 0; j < arr.length - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        int temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }
}

// Shell Sort
void shellSort(List<int> arr) {
  int n = arr.length;
  for (int gap = n ~/ 2; gap > 0; gap ~/= 2) {
    for (int i = gap; i < n; i++) {
      int temp = arr[i];
      int j;
      for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {
        arr[j] = arr[j - gap];
      }
      arr[j] = temp;
    }
  }
}

// Quick Sort
void quickSort(List<int> arr, int low, int high) {
  if (low < high) {
    int pivotIndex = partition(arr, low, high);
    quickSort(arr, low, pivotIndex - 1);
    quickSort(arr, pivotIndex + 1, high);
  }
}

int partition(List<int> arr, int low, int high) {
  int pivot = arr[high];
  int i = low - 1;
  for (int j = low; j < high; j++) {
    if (arr[j] <= pivot) {
      i++;
      int temp = arr[i];
      arr[i] = arr[j];
      arr[j] = temp;
    }
  }
  int temp = arr[i + 1];
  arr[i + 1] = arr[high];
  arr[high] = temp;
  return i + 1;
}

// Merge Sort
void mergeSort(List<int> arr, int left, int right) {
  if (left < right) {
    int mid = (left + right) ~/ 2;
    mergeSort(arr, left, mid);
    mergeSort(arr, mid + 1, right);
    merge(arr, left, mid, right);
  }
}

void merge(List<int> arr, int left, int mid, int right) {
  int n1 = mid - left + 1;
  int n2 = right - mid;

  List<int> leftArr = List<int>.filled(n1, 0);
  List<int> rightArr = List<int>.filled(n2, 0);

  for (int i = 0; i < n1; i++) {
    leftArr[i] = arr[left + i];
  }
  for (int j = 0; j < n2; j++) {
    rightArr[j] = arr[mid + 1 + j];
  }

  int i = 0, j = 0, k = left;
  while (i < n1 && j < n2) {
    if (leftArr[i] <= rightArr[j]) {
      arr[k] = leftArr[i];
      i++;
    } else {
      arr[k] = rightArr[j];
      j++;
    }
    k++;
  }

  while (i < n1) {
    arr[k] = leftArr[i];
    i++;
    k++;
  }

  while (j < n2) {
    arr[k] = rightArr[j];
    j++;
    k++;
  }
}

// Fungsi untuk mengukur waktu eksekusi
void measureSortingTime(
    List<int> data, Function sortingFunction, String algorithmName) {
  List<int> dataCopy = List<int>.from(data);
  DateTime start = DateTime.now();
  sortingFunction(dataCopy);
  Duration elapsedTime = DateTime.now().difference(start);
  print('$algorithmName: ${elapsedTime.inMilliseconds} ms');
}

void main() {
  List<int> dataSizes = [
    50000,
    100000,
    150000,
    200000,
    250000,
    300000,
    350000,
    400000,
    450000,
    500000
  ];

  for (int size in dataSizes) {
    List<int> data = generateRandomData(size);
    print('Data Size: $size');

    measureSortingTime(data, (arr) => insertionSort(arr), 'Insertion Sort');
    measureSortingTime(data, (arr) => selectionSort(arr), 'Selection Sort');
    measureSortingTime(data, (arr) => bubbleSort(arr), 'Bubble Sort');
    measureSortingTime(data, (arr) => shellSort(arr), 'Shell Sort');
    measureSortingTime(
        data, (arr) => quickSort(arr, 0, arr.length - 1), 'Quick Sort');
    measureSortingTime(
        data, (arr) => mergeSort(arr, 0, arr.length - 1), 'Merge Sort');

    print('-----------------------------');
  }
}
